
async function testImprovedHeavyRainSearch() {
  console.log('üîç Testing Improved Heavy Rain Search via API');
  console.log('=' .repeat(60));

  const testQueries = [
    'Ìè≠Ïö∞Ïãú ÎåÄÌîº Î∞©Î≤ïÏùÄ?',
    'ÌôçÏàòÍ∞Ä ÎÇ¨ÏùÑ Îïå Ïñ¥ÎñªÍ≤å ÎåÄÌîºÌï¥Ïïº ÌïòÎÇòÏöî?',
    'ÏßëÏ§ëÌò∏Ïö∞ ÎåÄÌîº ÏöîÎ†π',
    'ÎπÑÍ∞Ä ÎßéÏù¥ Ïò¨ Îïå ÌïôÍµêÏóêÏÑú Ïñ¥ÎñªÍ≤å Ìï¥Ïïº ÌïòÎÇòÏöî?',
    'Ïπ®Ïàò Ïãú ÌñâÎèôÏöîÎ†π'
  ];

  for (const query of testQueries) {
    console.log(`\nüìù Testing: "${query}"`);
    console.log('-'.repeat(40));

    try {
      const response = await fetch('http://localhost:3000/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question: query }),
      });

      const data = await response.json();

      if (data.answer) {
        console.log('‚úÖ Got answer!');
        console.log('Answer preview:', data.answer.substring(0, 200) + '...');
        
        if (data.sources && data.sources.length > 0) {
          console.log(`\nüìö Sources (${data.sources.length}):`);
          data.sources.forEach((source, idx) => {
            console.log(`  ${idx + 1}. Page ${source.metadata.page} (Similarity: ${source.similarity.toFixed(3)})`);
          });
        } else {
          console.log('‚ö†Ô∏è  No sources provided');
        }
      } else {
        console.log('‚ùå No answer received');
      }
    } catch (error) {
      console.error('‚ùå Error:', error.message);
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ Test completed!');
}

testImprovedHeavyRainSearch().catch(console.error);